[{"/home/enzyme/Desktop/react/impress/cv-project/src/index.js":"1","/home/enzyme/Desktop/react/impress/cv-project/src/App.js":"2","/home/enzyme/Desktop/react/impress/cv-project/src/reportWebVitals.js":"3","/home/enzyme/Desktop/react/impress/cv-project/src/components/Header.js":"4","/home/enzyme/Desktop/react/impress/cv-project/src/components/View.js":"5","/home/enzyme/Desktop/react/impress/cv-project/src/components/Create.js":"6","/home/enzyme/Desktop/react/impress/cv-project/src/components/Edit.js":"7","/home/enzyme/Desktop/react/impress/cv-project/src/components/Tag.js":"8"},{"size":500,"mtime":1608313105836,"results":"9","hashOfConfig":"10"},{"size":738,"mtime":1608450688402,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608313105836,"results":"12","hashOfConfig":"10"},{"size":818,"mtime":1608448725069,"results":"13","hashOfConfig":"10"},{"size":3069,"mtime":1608449848467,"results":"14","hashOfConfig":"10"},{"size":7978,"mtime":1608451036756,"results":"15","hashOfConfig":"10"},{"size":133,"mtime":1608313987242,"results":"16","hashOfConfig":"10"},{"size":2373,"mtime":1608451366698,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"v80qub",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/enzyme/Desktop/react/impress/cv-project/src/index.js",[],["38","39"],"/home/enzyme/Desktop/react/impress/cv-project/src/App.js",["40","41","42","43"],"import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport Create from './components/Create';\nimport View from './components/View';\nimport Edit from './components/Edit';\nimport Tag from './components/Tag';\n\n\nfunction App() {\n  return (\n    <Router>\n    <div>\n       <Header />\n      <Switch>\n        <Route path=\"/view\">\n          {/* <Tag /> */}\n          <View />\n        </Route>\n        <Route path=\"/create\">\n          <Create />\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/create\" />\n        </Route>\n      </Switch>\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","/home/enzyme/Desktop/react/impress/cv-project/src/reportWebVitals.js",[],"/home/enzyme/Desktop/react/impress/cv-project/src/components/Header.js",[],"/home/enzyme/Desktop/react/impress/cv-project/src/components/View.js",[],"/home/enzyme/Desktop/react/impress/cv-project/src/components/Create.js",["44","45"],"import React, {useState} from 'react'\nimport Tag from './Tag'\nimport { useHistory } from 'react-router-dom'\nimport './styles.css'\n\nfunction Create() {\n   const [educationFormNumber, setEducationFormNumber] = useState([1])\n   const [experienceFormNumber, setExperienceFormNumber] = useState([1])\n   const [skillFormNumber, setSkillFormNumber] = useState([1])\n   const [skills, setSkills] = useState([])\n   const [name, setName] = useState()\n   const [email, setEmail] = useState()\n   const [phone, setPhone] = useState()\n   const [address, setAddress] = useState()\n   const [education, setEducation] = useState([])\n   const [institution, setInstitution] = useState()\n   const [year, setYear] = useState()\n   const [degree, setDegree] = useState()\n   const [company, setCompany] = useState()\n   const [experienceYear, setExperienceYear] = useState()\n   const [designation, setDesignation] = useState()\n   const [experience, setExperience] = useState([])\n\n   const skillAdd = (skill) => {\n     setSkills(prev=> [...prev, skill])\n   }\n\n   const skillRemove = (skill) => {\n     setSkills(skills.filter(item=> item !== skill))\n   }\n\n   const history = useHistory()\n\n    return (\n        <div style={{flexDirection: 'column', marginTop: 20, marginBottom: 50, width: '100%',   display: 'flex', alignItems: 'center', justifyContent: 'center',}}>\n            <h5 style={{marginBottom: 20}}>Please fill the form </h5>\n            <div className=\"containerCreate\">\n             \n              <form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"formGroupExampleInput\">Name</label>\n                  <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Name\" onChange={e=> setName(e.target.value)}/>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"formGroupExampleInput2\">Email</label>\n                  <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput2\" placeholder=\"Email\" onChange={e=> setEmail(e.target.value)}/>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"formGroupExampleInput2\">Phone</label>\n                  <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput2\" placeholder=\"Phone Number\" onChange={e=> setPhone(e.target.value)}/>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"exampleFormControlTextarea1\">Address</label>\n                  <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\" placeholder=\"Address\" onChange={e=> setAddress(e.target.value)}></textarea>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"formGroupExampleInput\">Education</label>\n                  {educationFormNumber.map((item, index)=> (\n                    <div style={{display: 'flex', width: '100%', marginBottom: 10}}>\n                  <input style={{width: '40%', marginRight: 5}} type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Institute\" onChange={(e)=> setInstitution(e.target.value)}/>\n\n                  <input style={{width: '20%', marginRight: 5}} type=\"number\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Year\" onChange={e=>  setYear(e.target.value) }/>\n\n                  <input style={{width: '40%' , marginRight: 5}} type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Degree\" onChange={e=>  setDegree(e.target.value) }/>\n                  { index === educationFormNumber.length-1 &&\n                    <button  onClick={(e)=>{ \n                      setEducation(prev=> [...prev, {institution: institution, year: year, degree: degree}]);\n                      e.preventDefault(); \n                      setEducationFormNumber(educationFormNumber.concat([1]))\n                    }}>\n                      +\n                    </button>\n                  }\n                  </div>\n                  ))}\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"formGroupExampleInput\">Experience</label>\n                  {experienceFormNumber.map((item, index)=> (\n                    <div style={{display: 'flex', width: '100%', marginBottom: 10}}>\n                  <input style={{width: '40%', marginRight: 5}} type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Company\" onChange={e=> setCompany(e.target.value)}/>\n\n                  <input style={{width: '20%', marginRight: 5}} type=\"number\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Year\" onChange={e=> setExperienceYear(e.target.value)}/>\n\n                  <input style={{width: '40%' , marginRight: 5}} type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Designation\" onChange={e=> setDesignation(e.target.value)}/>\n                  { index === experienceFormNumber.length-1 &&\n                    <button  onClick={(e)=>{\n                      e.preventDefault(); \n                      setExperienceFormNumber(experienceFormNumber.concat([1]));\n                      setExperience(prev=> [...prev, {company: company, experienceYear: experienceYear, designation: designation}]);\n\n                    }}>\n                      +\n                    </button>\n                  }\n                  </div>\n                  ))}\n                </div>\n                {/* <div className=\"form-group\">\n                  <label htmlFor=\"formGroupExampleInput\">Skill</label>\n                  {skillFormNumber.map((item, index)=> (\n                    <div style={{width: '100%', display: 'flex', marginBottom: 10}}>\n                  <input style={{  marginRight: 5}} type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Skill\" />\n                  { index === skillFormNumber.length-1 &&\n                    <button  onClick={(e)=>{e.preventDefault(); setSkillFormNumber(skillFormNumber.concat([1]))}}>+</button>\n                  }\n                  </div>\n                  ))}\n                </div> */}\n                <div className=\"form-group\" >\n                  <label htmlFor=\"formGroupExampleInput\" style={{marginBottom: 10}}>Skill</label>\n                  <Tag onSkillAdd={skillAdd} onSkillRemove={skillRemove}/>\n                </div>\n                \n              </form>\n              <button \n                onClick={e=> {\n                // console.log(name, phone, email, address, education, experience, skills); \n                e.preventDefault()\n                  if(name && phone && email && address && education && experience && skills.length !== 0) {\n                    function validateEmail(mail) \n                        {\n                            var re = /\\S+@\\S+\\.\\S+/;\n                            return re.test(mail);\n                        }\n                        \n                    if(validateEmail(email) === false) {\n                      alert('Please enter a valid email')\n                    } else {\n                      history.push('/view', {profile: {\n                        name: name,\n                        email: email,\n                        phone: phone,\n                        address: address,\n                        education: education,\n                        experience: experience,\n                        skills: skills\n                      }})\n                    }\n                  } else {\n                    if(education.length === 0 || experience.length===0) {\n                      alert(' You must click + button to add experience and education')\n\n                    } else {\n                      alert('Please fill all the details. You must click + button to add experience and education')\n                    }\n                  }\n              }}>\n                  Submit for cv generation\n              </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Create\n","/home/enzyme/Desktop/react/impress/cv-project/src/components/Edit.js",[],"/home/enzyme/Desktop/react/impress/cv-project/src/components/Tag.js",["46"],"import { List } from 'immutable'\nimport React, { Component } from 'react'\nimport { TagBoxAsync } from 'react-tag-box'\n// import './styles.scss'\n \n// Mock server data. This would normally be in your database.\nconst sampleTags = List(\n  ['Java', 'Python', 'C', 'C++', 'React', 'Ruby', 'Node', 'PHP', 'Javascript'].map(t => ({\n    label: t,\n    value: t\n  }))\n)\n\n \n \n// Mock http request. This would normally make a request to your server to fetch matching tags.\nconst fetch = input => {\n    console.log(input.toLowerCase())\n    const filtered = sampleTags.filter(t=> t.label.toLowerCase().includes(input.toLowerCase()))\n    console.log(sampleTags.filter(t=> t.label.toLowerCase().includes(input.toLowerCase())).toJS())\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(sampleTags.filter(t=> t.value.toString().toLowerCase().includes(input.toString().toLowerCase())).toJS())\n    }, 500)\n  })\n}\n \nexport default class Async extends Component {\n  state = {\n    selected: sampleTags.take()\n  }\n \n  render() {\n    const { selected } = this.state\n    const onSelect = tag => {\n      const newTag = {\n        label: tag.label,\n        value: tag.value || tag.label\n      }\n \n      this.setState({\n        selected: selected.push(newTag)\n      })\n      this.props.onSkillAdd(tag.label)\n    }\n \n    const remove = tag => {\n      this.setState({\n        selected: selected.filter(t => t.value !== tag.value)\n      })\n      this.props.onSkillRemove(tag.label)\n    }\n \n    const placeholder = selected.isEmpty() ? 'Skills - eg: React' :\n      \"Skills - eg: React\"\n \n    return (\n        <div style={{  width: '100%'}}>\n      <TagBoxAsync\n        fetch={fetch}\n        selected={selected.toJS()}\n        onSelect={onSelect}\n        removeTag={remove}\n        backspaceDelete={true}\n        placeholder={placeholder}\n         \n        renderTag={(tag, remove)=> {\n            return (\n                <div style={{color: 'white', marginBottom: 10, display: 'flex', alignItems: 'center', justifyContent: 'center', width: 120, height: 30, backgroundColor: \"gray\"}}>\n                    <b style={{display: 'flex', alignItems: 'center', justifyContent: 'center', flex: 1}}>{tag.label}</b>\n                    <button style={{width: 30}} onClick={(tag)=>remove(tag)}>X</button>\n                </div>\n            \n            )\n        }}\n      />\n      </div>\n    )\n  }\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":8,"column":3,"nodeType":"53","messageId":"54","endLine":8,"endColumn":7},{"ruleId":"51","severity":1,"message":"56","line":13,"column":8,"nodeType":"53","messageId":"54","endLine":13,"endColumn":12},{"ruleId":"51","severity":1,"message":"57","line":14,"column":8,"nodeType":"53","messageId":"54","endLine":14,"endColumn":11},{"ruleId":"51","severity":1,"message":"58","line":9,"column":11,"nodeType":"53","messageId":"54","endLine":9,"endColumn":26},{"ruleId":"51","severity":1,"message":"59","line":9,"column":28,"nodeType":"53","messageId":"54","endLine":9,"endColumn":46},{"ruleId":"51","severity":1,"message":"60","line":19,"column":11,"nodeType":"53","messageId":"54","endLine":19,"endColumn":19},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Edit' is defined but never used.","'Tag' is defined but never used.","'skillFormNumber' is assigned a value but never used.","'setSkillFormNumber' is assigned a value but never used.","'filtered' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]